<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kopoctc.mapper.postMapper">

	<!-- 
		mybatis-config.xml의 typeAlias에 등록해두지 않았다면 
		
		<select id="selectMember" resultType="com.crud.dto.PostVO" >
			SELECT ID, PW ,NAME FROM TEST
		</select>
		
		이렇게 해야 한다.
	-->
	
	<!-- 글 목록 조회 -->
	<select id="selectList" resultType="postVO" parameterType="java.lang.Integer">
		SELECT a.viewNo,a.title,a.viewcnt,a.enroll_dt,a.ref,a.textlvl,a.step,a.parentsno,a.content,a.writer,(select count(b.viewNo) FROM spring_nBoard b WHERE b.ref=a.ref) rCnt FROM spring_nBoard a WHERE textlvl=0 ORDER BY ref desc LIMIT #{firstPost},10;
	</select>
	
	<!-- 전체 글 개수 -->
	<select id="selectCnt" resultType="java.lang.Integer">
		SELECT count(viewNo) FROM spring_nBoard WHERE textlvl=0;
	</select>
	
	<!-- 글 상세보기 -->
	<select id="selectView" resultType="postVO" parameterType="java.lang.Integer">
		SELECT * FROM spring_nBoard WHERE viewNo=#{viewNo};
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateViewCnt" parameterType="java.lang.Integer">
		UPDATE spring_nBoard SET viewcnt = viewcnt+1 WHERE viewNo=#{viewno};
	</update>
	
	<!-- 해당 글의 페이지 조회 -->
	<select id="selectPG1" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT count(viewNo) FROM spring_nBoard WHERE ref>(SELECT ref FROM spring_nBoard WHERE viewNo=#{viewno}) and textlvl=0; 
	</select>
	
	<!-- 글 쓴 이후 해당 글 확인을 위한 글번호 조회 -->
	<select id="viewno" resultType="java.lang.Integer" parameterType="String">
		SELECT viewNo FROM spring_nBoard WHERE title=#{title} ORDER BY viewNo desc LIMIT 1;
	</select>
	
	<!-- 새글 쓰기 위해 사용할 원글번호 조회 -->
	<select id="newRef" resultType="java.lang.Integer">
		SELECT max(ref) FROM spring_nBoard;
	</select>
	
	<!-- 글쓰기 -->
	<insert id="insertPost" parameterType="postVO">
		INSERT INTO spring_nBoard(title,ref,textlvl,step,parentsno,content,writer,enroll_dt) VALUES (#{title},#{ref},#{textlvl},#{step},#{parentsno},#{content},#{writer},now());
	</insert>
	
	<!-- 답글달 때 글 순서 조정 -->
	<update id="updateForRe" parameterType="java.lang.Integer">
		UPDATE spring_nBoard SET step=step+1 WHERE step>=#{step};
	</update>
	
	<!-- 수정 -->
	<update id="updatePost">
		UPDATE spring_nBoard SET title=#{title}, content=#{content} WHERE ref=#{ref} and step=#{step};
	</update>
		
	<!-- 삭제하기 전 해당 글과 같은 글수준의 글이 후순위에 있는지 확인 -->
	<select id="selectRangeForDel" resultType="java.lang.Integer">
		SELECT min(step) FROM spring_nBoard WHERE ref=(SELECT ref FROM spring_nBoard WHERE viewNo=#{viewno}) and textlvl=(SELECT textlvl FROM spring_nBoard WHERE viewNo=#{viewno}) and step>(SELECT step FROM spring_nBoard WHERE viewNo=#{viewno});
	</select>
	<!-- 서브쿼리용 select문 -->
	<select id="subquery" parameterType="hashmap" resultType="java.lang.Integer">
		SELECT <if test="columnName == 'ref'">ref</if><if test="columnName == 'step'">step</if> FROM spring_nBoard WHERE viewNo=#{viewno};
	</select>
	<!-- 같은 글수준이 없다면 해당글 이후 전부 삭제 -->
	<delete id="deletePost" parameterType="hashmap">
		DELETE FROM spring_nBoard WHERE ref=#{ref} and step>=#{step};
	</delete>
	<!-- 같은 글수준이 있으면 그 글 전까지만 삭제 -->
	<delete id="deletePostLimit" parameterType="hashmap">
		DELETE FROM spring_nBoard WHERE ref=#{ref} and step between #{step1} and #{step2};
	</delete>
	
</mapper>